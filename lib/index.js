// Generated by CoffeeScript 1.7.1
var SpriteBrunch, crypto, fs, json2css, path, spritesmith, sysPath, _, _when;

_ = require('underscore');

fs = require('fs');

sysPath = require('path');

spritesmith = require('spritesmith');

json2css = require('json2css');

crypto = require('crypto');

_when = require('when');

path = require("path");

module.exports = SpriteBrunch = (function() {
  SpriteBrunch.prototype.brunchPlugin = true;

  SpriteBrunch.prototype.png = [".png", ".gif"];

  SpriteBrunch.prototype.jpegs = [".jpg", "jpeg"];

  function SpriteBrunch(config) {
    this.config = config;
    this.options = _.extend({
      path: 'app/assets/images/sprites',
      destCSS: 'app/sass/_sprites.sass',
      algorithm: 'top-down',
      cssFormat: 'sass',
      engine: 'canvas',
      imgOpts: {
        format: 'auto',
        quality: 90
      }
    }, this.config.plugins.sprites);
    this.spritePath = sysPath.resolve(this.options.path);
    this.formats = this.png.concat(this.jpegs);
  }

  SpriteBrunch.prototype.onCompile = function(changedFiles) {
    var alldone, spriteFolders;
    if (!fs.existsSync(this.spritePath)) {
      return;
    }
    spriteFolders = fs.readdirSync(this.spritePath);
    alldone = [];
    if (spriteFolders) {
      return spriteFolders.forEach((function(_this) {
        return function(folder) {
          var format, hasJpg, imagePath, images, spriteImages, stat;
          hasJpg = false;
          imagePath = sysPath.join(_this.options.path, folder);
          stat = fs.statSync(imagePath);
          if (stat.isFile()) {
            return;
          }
          images = fs.readdirSync(imagePath);
          spriteImages = [];
          images.forEach(function(image) {
            if (!hasJpg) {
              hasJpg = !!~_this.jpegs.indexOf(path.extname(image).toLowerCase());
            }
            if (!!~_this.formats.indexOf(path.extname(image).toLowerCase())) {
              return spriteImages.push(sysPath.join(imagePath, image));
            }
          });
          format = _this.options.imgOpts.format;
          if (_this.options.imgOpts.format === 'auto') {
            format = hasJpg === true ? 'jpg' : 'png';
          }
          if (spriteImages.length > 0) {
            alldone.push(_this.generateSprites(spriteImages, folder, format));
          }
          return _when.all(alldone).then(function(sprites) {
            var dummy_data, styles;
            _this.addTemplate(_this.options.cssFormat);
            styles = '';
            sprites.forEach(function(sprite) {
              var formatOpts;
              formatOpts = {
                sprites: true,
                spriteImage: sprite.foldername,
                spritePath: '../' + _this.options.path + '/' + sprite.imageFile
              };
              return styles += json2css(sprite.coordinates, {
                format: _this.options.cssFormat,
                formatOpts: formatOpts
              });
            });
            dummy_data = [
              {
                'name': 'github',
                'x': 0,
                'y': 0,
                'width': 10,
                'height': 20,
                'total_width': 80,
                'total_height': 100,
                'image': 'spritesheet.png'
              }
            ];
            styles += json2css(dummy_data, {
              format: _this.options.cssFormat,
              formatOpts: {
                functions: true
              }
            });
            return _this.writeStyles(styles);
          });
        };
      })(this));
    }
  };

  SpriteBrunch.prototype.generateSprites = function(files, foldername, format) {
    var done, spritesmithParams;
    done = _when.defer();
    spritesmithParams = {
      src: files,
      engine: this.options.engine,
      algorithm: this.options.algorithm,
      exportOpts: {
        format: format,
        quality: this.options.imgOpts.quality
      }
    };
    spritesmith(spritesmithParams, (function(_this) {
      return function(err, result) {
        var allImages, hash, imageFile, imageFilePath;
        if (err) {
          console.error('Error generating sprites in folder: ', foldername, err);
          return false;
        }
        hash = crypto.createHash('sha1').update(result.image).digest('hex');
        imageFile = foldername + '-' + hash + '.' + format;
        imageFilePath = sysPath.join(_this.spritePath, imageFile);
        if (!fs.existsSync(imageFilePath)) {
          allImages = fs.readdirSync(_this.spritePath);
          allImages.forEach(function(singleImage) {
            var existingFile;
            if (singleImage.match(foldername + '-(.{40})\.(png|jpg)')) {
              existingFile = sysPath.join(_this.spritePath, singleImage);
              return fs.unlinkSync(existingFile);
            }
          });
          fs.writeFileSync(imageFilePath, result.image, 'binary');
        }
        return done.resolve({
          coordinates: _this.processCoordinates(result.coordinates, foldername, imageFile),
          imageFile: imageFile,
          foldername: foldername
        });
      };
    })(this));
    return done.promise;
  };

  SpriteBrunch.prototype.writeStyles = function(cssStr) {
    var currentFile, sha, sha2, spritePath;
    spritePath = this.options.destCSS;
    sha = crypto.createHash('sha1').update(cssStr).digest('hex');
    sha2 = '';
    if (fs.existsSync(spritePath)) {
      currentFile = fs.readFileSync(spritePath, 'utf8');
      sha2 = crypto.createHash('sha1').update(currentFile).digest('hex');
    }
    if (sha !== sha2) {
      return fs.writeFile(spritePath, cssStr, 'utf8', function(err) {
        if (err) {
          return console.log('Could not write stylesheet, please make sure the path exists');
        }
      });
    }
  };

  SpriteBrunch.prototype.addTemplate = function(template) {
    var currentTemplate, templatePath;
    templatePath = sysPath.join(__dirname, '..', 'templates', template + '.template.mustache');
    currentTemplate = fs.readFileSync(templatePath, 'utf8');
    return json2css.addMustacheTemplate(template, currentTemplate);
  };

  SpriteBrunch.prototype.processCoordinates = function(coordinates, foldername, imageFile) {
    var new_coordinates;
    new_coordinates = [];
    Object.keys(coordinates).forEach(function(key) {
      var stylename;
      stylename = key.split('/');
      stylename = stylename.pop();
      stylename = stylename.replace(/\.[^/.]+$/, '');
      coordinates[key].image = imageFile;
      coordinates[key].name = stylename;
      new_coordinates.push(coordinates[key]);
      return delete coordinates[key];
    });
    return new_coordinates;
  };

  return SpriteBrunch;

})();
